---
- name: Delete a {{ env_name }} environment config
  hosts: dockerhost
  sudo: False

  vars:
    - clean_up: False
    - do_debug: False

  vars_files:
    - ../roles/vars/base.yml

  pre_tasks:
    - include: '{{ tasks_base }}debug_info.yml'
      when: do_debug == True

    - include: '{{ tasks_base }}check_connection.yml'

  tasks:
    - debug: vars=image msg="{{ image }}"
      when: do_debug == True and image is defined and image != ""

    - name: Cleanup environment config files from all images
      file: dest="{{ item }}" state=absent
      #debug: msg="{{ item }}"
      register: checkout
      failed_when: checkout.state != "absent"
      with_fileglob:
        - "{{ config_base }}/**/{{ env_name }}.json"
      when: image is defined and image == ""

    - name: Cleanup environment config file from specific image
      file: dest="{{ item }}" state=absent
      #debug: msg="{{ item }}"
      register: checkout
      failed_when: checkout.state != "absent"
      with_fileglob:
        - "{{ config_base }}/{{ image }}/{{ env_name }}.json"
      when: image is defined and image != ""

    - name: Cleanup environment config file from specific image with extras
      file: dest="{{ item }}" state=absent
      #debug: msg="{{ item }}"
      register: checkout
      failed_when: checkout.state != "absent"
      with_fileglob:
        - "{{ config_base }}/{{ image }}/{{ pyapp }}/{{ env_name }}.json"
      when: image is defined and image != "" and pyapp is defined and pyapp != ""

    - debug: vars=clean_up msg="DELETE? {{ clean_up }}"
      when: clean_up|bool and image is defined

    - name: Delete "{{ item }}" folder
      file: dest="{{ item }}" state=absent
      register: checkout
      failed_when: checkout.state != "absent"
      with_items:
      - "{{ jenkins_base }}/{{ env_name }}"
      - "{{ jenkins_data_base }}/{{ env_name }}"
      when: clean_up|bool and image is defined and image == ""
