---
- name: CONTENT | Prepare special nginx config
  copy: src="{{ files_base }}/default" dest="{{ site_default_path }}/default" mode=644
  register: checkout
  failed_when: checkout.state != "file"
  tags: CONTENT
- debug: msg="{{ checkout }}"
  when: do_debug|bool and checkout is defined

- name: CONTENT | Cleanup content
  file: dest="{{ nginx_html_path }}/{{ item }}" state=absent
  with_items:
  - index.html
  - offline.html
  register: checkout
  failed_when: checkout.state != "absent"
  tags: CONTENT
- debug: msg="{{ checkout }}"
  when: do_debug|bool and checkout is defined

- name: CONTENT | Prepare default "{{ item }}"
  template: src="{{ templates_base }}/{{ item }}" dest="{{ nginx_html_path }}/{{ item }}" mode=644
  #debug: msg="{{ item }}"
  register: checkout
  with_items:
  - index.html
  - offline.html
  failed_when: checkout.state != "file"
  tags: CONTENT
- debug: msg="{{ checkout }}"
  when: do_debug|bool and checkout is defined

- name: CONTENT | Starting NGINX
  service:
    name: nginx
    state: started
  tags: CONTENT

- name: CONTENT | Check
  local_action: uri url=http://{{ ansible_eth0["ipv4"]["address"] }}
  register: checkout
  failed_when: checkout.status != 200
  tags: CONTENT
- debug: msg="{{ checkout }}"
  when: do_debug|bool and checkout is defined

- name: CONTENT | Check offline.html
  local_action: uri url=http://{{ ansible_eth0["ipv4"]["address"] }}/offline.html
  register: checkout
  failed_when: checkout.status != 200
  tags: CONTENT
- debug: msg="{{ checkout }}"
  when: do_debug|bool and checkout is defined

