# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Inspired from: https://gist.github.com/cliffano/9868180
# Improved and made compatible with Ansible v2
"""
human_log
"""

from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

from ansible.plugins.callback import CallbackBase
try:
    import simplejson as json
except ImportError:
    import json

# Fields to reformat output for
#FIELDS = ['cmd', 'command', 'start', 'end', 'delta', 'msg', 'stdout', 'stderr', 'results']
OUT_FIELDS = ['cmd', 'command', 'start', 'end', 'delta', 'msg', 'stdout', 'stderr', 'results']


class CallbackModule(CallbackBase):
    '''
    CallbackModule
    '''
    _fields = OUT_FIELDS

    def extract_fields(self, tags, variables):
        '''
        extract_fields
        '''
        fields = None
        for tag in tags:
            values = tag.split('(')
            marker = values[0]
            if marker == 'human_log':
                fields = values[1].replace(')', '').split('|')

        if variables:
            for key, values in variables.iteritems():
                if key == 'human_log':
                    fields = []
                    for i in values:
                        if i not in fields:
                            fields.append(i)

        # print fields
        return fields

    def human_log(self, data):
        '''
        human_log
        '''
        if not self._fields:
            self._fields = OUT_FIELDS

        if isinstance(data, dict):
            for field in self._fields:
                if field in data.keys() and data[field]:
                    if isinstance(data[field], list):
                        if field in ['stdout', 'stdout_lines', 'stderr']:
                            print("{0}:".format(field))

                        for element in data[field]:
                            if isinstance(element, dict):
                                output = self._format_output(data[field])
                                print("{0}:\n{1}".format(field, output))
                            else:
                                output = self._format_output(element.encode('utf-8').decode('utf-8'))
                                if field in ['stdout', 'stdout_lines', 'stderr']:
                                    print("{0}".format(output.replace("\\n", "\n")))
                                else:
                                    print("{0}: {1}".format(field, output.replace("\\n", "\n")))

                    elif isinstance(data[field], dict):
                        output = self._format_output(data[field])
                        print("{0}:\n{1}".format(field, output))

                    else:
                        if isinstance(data[field], unicode):
                            output = self._format_output(
                                data[field].encode('utf-8').decode('utf-8')
                                )
                            output = output.encode('ascii', 'replace')
                        else:
                            output = self._format_output(data[field])

                        if field in ['stdout', 'stdout_lines', 'stderr']:
                            print("{0}:\n{1}".format(field, output.replace("\\n", "\n")))
                        else:
                            print("{0}: {1}".format(field, output.replace("\\n", "\n")))

    def _format_output(self, output):
        # If output is a dict
        if isinstance(output, list):
            return json.dumps(output, indent=2)

        # If output is a list of dicts
        if isinstance(output, list) and isinstance(output[0], dict):
            # This gets a little complicated because it potentially means
            # nested results, usually because of with_items.
            real_output = list()
            for _, item in enumerate(output):
                copy = item
                if isinstance(item, dict):
                    for field in OUT_FIELDS:
                        if field in item.keys():
                            copy[field] = self._format_output(item[field])
                real_output.append(copy)
            return json.dumps(output, indent=2)

        # If output is a list of strings
        if isinstance(output, list) and not isinstance(output[0], dict):
            # Strip newline characters
            real_output = list()
            for item in output:
                if "\n" in item:
                    for string in item.split("\n"):
                        real_output.append(string)
                else:
                    real_output.append(item)

            # Reformat lists with line breaks only if the total length is
            # >75 chars
            if len("".join(real_output)) > 75:
                return "\n" + "\n".join(real_output)
            else:
                return " ".join(real_output)

        # Otherwise it's a string, just return it
        return output

    def on_any(self, *args, **kwargs):
        '''
        on_any
        '''
        pass

    def runner_on_failed(self, host, res, ignore_errors=False):
        '''
        runner_on_failed
        '''
        host = host
        ignore_errors = ignore_errors
        self.human_log(res)

    def runner_on_ok(self, host, res):
        '''
        runner_on_ok
        '''
        host = host
        self.human_log(res)

    def runner_on_error(self, host, msg):
        '''
        runner_on_error
        '''
        pass

    def runner_on_skipped(self, host, item=None):
        '''
        runner_on_skipped
        '''
        pass

    def runner_on_unreachable(self, host, res):
        '''
        runner_on_unreachable
        '''
        host = host
        self.human_log(res)

    def runner_on_no_hosts(self):
        '''
        runner_on_no_hosts
        '''
        pass

    def runner_on_async_poll(self, host, res, jid, clock):
        '''
        runner_on_async_poll
        '''
        host = host
        jid = jid
        clock = clock
        self.human_log(res)

    def runner_on_async_ok(self, host, res, jid):
        '''
        runner_on_async_ok
        '''
        host = host
        jid = jid
        self.human_log(res)

    def runner_on_async_failed(self, host, res, jid):
        '''
        runner_on_async_failed
        '''
        host = host
        jid = jid
        self.human_log(res)

    def playbook_on_start(self):
        '''
        playbook_on_start
        '''
        pass

    def playbook_on_notify(self, host, handler):
        '''
        playbook_on_notify
        '''
        pass

    def playbook_on_no_hosts_matched(self):
        '''
        playbook_on_no_hosts_matched
        '''
        pass

    def playbook_on_no_hosts_remaining(self):
        '''
        playbook_on_no_hosts_remaining
        '''
        pass

    def playbook_on_task_start(self, name, is_conditional):
        '''
        playbook_on_task_start
        '''
        is_conditional = is_conditional
        self._fields = None
        if name and not isinstance(name, unicode):
            if name.tags:
                self._fields = self.extract_fields(name.tags, name.get_vars())

    def playbook_on_vars_prompt(self, varname, private=True, prompt=None,
                                encrypt=None, confirm=False, salt_size=None,
                                salt=None, default=None):
        '''
        playbook_on_vars_prompt
        '''
        pass

    def playbook_on_setup(self):
        '''
        playbook_on_setup
        '''
        pass

    def playbook_on_import_for_host(self, host, imported_file):
        '''
        playbook_on_import_for_host
        '''
        pass

    def playbook_on_not_import_for_host(self, host, missing_file):
        '''
        playbook_on_not_import_for_host
        '''
        pass

    def playbook_on_play_start(self, pattern):
        '''
        playbook_on_play_start
        '''
        pass

    def playbook_on_stats(self, stats):
        '''
        playbook_on_stats
        '''
        pass
